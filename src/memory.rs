pub struct Memory {
    mem: [u8; 4096],
}

impl Memory {
    pub fn new() -> Memory {
        let mut default_mem = [0; 4096];
        for (index, byte) in FONT_SET.iter().enumerate() {
            default_mem[index] = *byte;
        }
        // TEMP: for testing purposes
        // Draw at (V3, V2) 5 lines
        default_mem[0x50] = 0xD3;
        default_mem[0x51] = 0x24;
        // Assign V0 to 0
        default_mem[0x52] = 0x60;
        default_mem[0x53] = 0x00;
        // Assign V1 to 16
        default_mem[0x54] = 0x61;
        default_mem[0x55] = 0x10;
        // Assign V2 to 23
        default_mem[0x56] = 0x62;
        default_mem[0x57] = 0x17;
        // Set I to sprite address of V4
        default_mem[0x58] = 0xF4;
        default_mem[0x59] = 0x29;
        // Draw at (V1, V2) 5 lines
        default_mem[0x5A] = 0xD1;
        default_mem[0x5B] = 0x24;
        Memory { mem: default_mem }
    }

    pub fn read_byte(&self, address: usize) -> u8 {
        self.mem[address]
    }

    pub fn write_byte(&mut self, address: usize, value: u8) {
        self.mem[address] = value;
    }
}

static FONT_SET: [u8; 0x50] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];
